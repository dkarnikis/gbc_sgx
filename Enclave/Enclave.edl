enclave {

    include "../Enclave/gbc/types.h"
    include "../Enclave/gbc/emu.h"
trusted {
    include "../Enclave/sgx_structs.h"
    include "../Enclave/sgx_includes.h"
    /* define ECALLs here. */
	public void print_secret();
	public void set_secret(unsigned int a);
	public void addition(unsigned int a, unsigned int b);
	public unsigned int get_secret();
    public void ecall_init(int arg, [user_check]FILE *stdi, [user_check]FILE *stdo, [user_check]FILE *stde);
    public void ecall_start(struct emu_args gb);
    public void ecall_push_arg([in, out, string] char *arg);
    public void ecall_emu_step_frame([user_check] struct gb_state *p1   , [user_check] struct emu_state *p, [user_check]struct emu_cpu_state *ecs, [user_check] u16 *lcd_pixbuf);
    public void ecall_emu_init([user_check] struct gb_state *gb_stat, [user_check] struct emu_args *emu_args, [user_check] struct emu_state *p, [user_check]struct emu_cpu_state *ecs);
    public void  ecall_emu_process_inputs([user_check]struct gb_state *s, [user_check]struct player_input *p, [user_check] struct emu_state *es);


    public void ecall_emu_save([user_check]struct gb_state *s, char n, [in,out,string]char *p);
    public void ecall_disassemble([user_check]void *s);
    public void ecall_audio_update([user_check]void *s);
};

    untrusted {
        /* define OCALLs here. */
		void print_data(unsigned int got);
		void ocall_print([user_check]uint8_t* value);
        int ocall_fflush([user_check] FILE *ptr);
        size_t ocall_fwrite([in, size=size, count=count] void *buffer, size_t size, size_t count, [user_check]FILE *fd);
        char *ocall_fgets([in, string]char *str, int n, [user_check]FILE *stream);
        char *ocall_getenv([in, string] const char *name);
        int ocall_fputs([in,string] const char *str, [user_check] FILE *stream);
        long int ocall_clock();
        long int ocall_time([user_check] long int *src);
        struct lconv *ocall_localeconv();
        FILE *ocall_fopen([in, string] char *filename, int l, [in, string] const char *mode);
        FILE *ocall_fdopen([in, string] const char *f, [in, string] const char *mode);
        FILE *ocall_popen([in, string] const char *cmd, [in, string] const char *type);
        int ocall_pclose([user_check] FILE *p);
        void *ocall_dlopen([in, string] const char *fmt, int flags);
        int ocall_dlclose([user_check] void *handle);
        int ocall_close(int a);
        long ocall_sysconf(int a);
        int ocall_chdir([in, string]const char *path);
        int ocall_closedir([user_check] void *dir);
        void ocall_exit(int status_);
        char *ocall_setlocale(int category, [in, string] const char *locale);
        int ocall_system([in, string] const char *str);
        //long int ocall_mktime([user_check] struct tm *timeptr);
        int ocall_remove([in, string] const char *filename);
        //struct tm*ocall_localtime([user_check] const long int *timer);
        //struct tm *ocall_gmtime([user_check]const long int *timer);
        int ocall_rename([in, string] const char *filename, [in, string] const char *new_filename);
        char *ocall_tmpnam([in, string] char *str);
        int ocall_fclose([user_check] FILE *ptr);
        int ocall_setvbuf([user_check] FILE *stream, [in, out, string] char *buffer, int mode, size_t size);
        long int ocall_ftell([user_check] FILE *stream);
        int ocall_fseek([user_check] FILE *stream, long int offset, int whence);
        FILE *ocall_tmpfile();
        void ocall_clearerr([user_check] FILE *stream);
        size_t ocall_fread([in, out ,size=size, count=nmemb] void *ptr, size_t size, size_t nmemb, [user_check] FILE *stream);
        int ocall_ferror([user_check] FILE *ptr);
        int ocall_getc([user_check] FILE *stream);
        int ocall_ungetc(int ch, [user_check] FILE *stream);
        FILE *ocall_freopen([in, string] const char *filename, [in, string] const char *mode, [user_check] FILE *stream);
        int ocall_feof([user_check] FILE *stream);
        int ocall_rand();                                               // done in sgx
        void ocall_srand(unsigned int seed);                            // done in sgx
        void ocall_print_num(size_t s);
        char *recover_filename([user_check]FILE *f);
        void *ocall_opendir([in, string]const char *t);
        int ocall_symlink([in, string] const char *t, [in, string] const char *l);
        void *ocall_dlsym([user_check] void *handle, [in, string] const char *s);
        int ocall_mkdir([in, string] const char *l, int m);
        int ocall_fseeko([user_check] FILE *s, long o, int w);
        int ocall_fileno([user_check] FILE *s);
        void ocall_rewind([user_check] FILE *s);
        long ocall_ftello([user_check] FILE *s);
        size_t ocall_read(int fd, [in, out ,size=1, count=s] void *ptr, size_t s);
        size_t ocall_write(int fd, [in, out ,size=1, count=s] void *ptr, size_t s);
        long ocall_lseek(int f, long o, int w);
        int ocall_isatty(int f);
        char *ocall_getcwd([in, out, size=1, count=s] char *b, size_t s);
        int ocall_signal(int a, [user_check]void  *b);
        //int ocall_ioctl(int fd, unsigned long r, [user_check]struct winsize *ws);
        int ocall_tcgetattr(int f, [user_check] void *p);
        int ocall_tcsetattr(int f, int oa, [user_check] const void *p);
        void ocall_FD_ZERO([user_check] void *p);
        void ocall_FD_SET(int fd, [user_check] void *p);
        void ocall_FD_ISSET(int fd, [user_check] void *p);
        int ocall_select(int a, [user_check] void *r,  [user_check] void *w, [user_check] void *e, [user_check] void *t);

        char *ocall_readline([in, string]char *s);
        void ocall_add_history([in, string]char *s);
        void ocall_gui_lcd_render_frame(char a, [in,out]uint16_t p[46040]);
        void ocall_gui_input_poll([user_check] struct player_input *input_state2);
    };
};
